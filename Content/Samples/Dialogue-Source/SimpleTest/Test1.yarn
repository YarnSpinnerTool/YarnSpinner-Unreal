title: Start
---

A: Hey, here's a line! #line:test1_1
<<do_something_cool param1 param2>>
B: Here's another line! #line:test1_2

[float height=4]Here's [wave]a[/float] line [shake]with[/shake] lots of[/] markup. #line:test1_markup1
Here's a line with escaped \[brackets\]. #line:test1_markup2
[nomarkup]Here's a line with [nomarkup] [[]] .[/nomarkup] #line:test1_markup3

// Show some options
-> Wow! #line:test1_3
    A: Right? #line:test1_4
-> Cool! #line:test1_5
    B: Yeah! #line:test1_6
-> Neat! #line:test1_7
    A: I know! #line:test1_8 
-> This is confusing, give me a sec to think.
    <<wait 5>>

Have we visited line:test1_1? {visited("#line:test1_1")} {visited("line:test1_1")} {visited("test1_1")} #line:test1_testvisited
Visited counts: {visited_count("#line:test1_1")} {visited_count("line:test1_1")} {visited_count("test1_1")} #line:test1_testvisitedcount

Ok, onto the next section... #line:test1_whatever

<<jump Variables>>


===
title: Variables
---

<<declare $explainCount = 1>>

{visited("line:test1_9")} Ok, listen up because I'm only going to say this {$explainCount} {$explainCount}|plural(one=time,other=times): you can use *variables* in your Yarn scripts! #line:test1_9
-> Sorry, could you please repeat that? #line:test1_10
    // Had to add the following line because the current runner needs the user to press "Continue" for *every* line, including commands.
    Ughh... fine. #line:test1_11
    <<set $explainCount = $explainCount + 1>>
    <<jump Variables>>
-> Got it! #line:test1_12
    Good! #line:test1_13
-> I've had enough, let me out!
    <<stop>>

<<jump Expressions>>


===
title: Expressions
---

So what about expressions, then?  Can we do maths?  Like 3.2 + 6.7 + 18 = {3.2 + 6.7 + 18}?  #line:test1_14
Ok, and can we do expressions with variables? I explained variables to you {$explainCount} times, but it felt like {$explainCount * 1000} times!  So let's just say 'yes' for now and leave it at that. #line:test1_15

<<jump Functions>>


===
title: Functions
---

Let's call a function now.  MyAwesomeFunc returns: {MyAwesomeFunc(true, 12.345)} #line:test1_16
Nice!  Let's call another.  DoStuff returns: {DoStuff(true, 12.345, "a string")} #line:test1_17
Last time, using standard YarnSpinner functions this time. 123 + 456 - 789 is {123 + 456 - 789}! #line:test1_18
Ok, that's enough functions for now. Let's move on. #line:test1_19

<<jump Commands>>


===
title: Commands
---

Wanna see something cool? Gonna run a command now. Ready, set... #line:test1_20

// Run a command
<<do_something_cool param1 param2>>

<<jump Summary>>


===
title: Summary
---

A: All done! #line:test1_21

===
