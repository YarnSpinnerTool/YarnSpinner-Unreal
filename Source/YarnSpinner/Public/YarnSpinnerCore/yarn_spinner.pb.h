// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yarn_spinner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_yarn_5fspinner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_yarn_5fspinner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_yarn_5fspinner_2eproto YARNSPINNER_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct YARNSPINNER_API TableStruct_yarn_5fspinner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
YARNSPINNER_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_yarn_5fspinner_2eproto;
namespace Yarn {
class Instruction;
struct InstructionDefaultTypeInternal;
YARNSPINNER_API extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
YARNSPINNER_API extern NodeDefaultTypeInternal _Node_default_instance_;
class Node_LabelsEntry_DoNotUse;
struct Node_LabelsEntry_DoNotUseDefaultTypeInternal;
YARNSPINNER_API extern Node_LabelsEntry_DoNotUseDefaultTypeInternal _Node_LabelsEntry_DoNotUse_default_instance_;
class Operand;
struct OperandDefaultTypeInternal;
YARNSPINNER_API extern OperandDefaultTypeInternal _Operand_default_instance_;
class Program;
struct ProgramDefaultTypeInternal;
YARNSPINNER_API extern ProgramDefaultTypeInternal _Program_default_instance_;
class Program_InitialValuesEntry_DoNotUse;
struct Program_InitialValuesEntry_DoNotUseDefaultTypeInternal;
YARNSPINNER_API extern Program_InitialValuesEntry_DoNotUseDefaultTypeInternal _Program_InitialValuesEntry_DoNotUse_default_instance_;
class Program_NodesEntry_DoNotUse;
struct Program_NodesEntry_DoNotUseDefaultTypeInternal;
YARNSPINNER_API extern Program_NodesEntry_DoNotUseDefaultTypeInternal _Program_NodesEntry_DoNotUse_default_instance_;
}  // namespace Yarn
PROTOBUF_NAMESPACE_OPEN
template<> YARNSPINNER_API ::Yarn::Instruction* Arena::CreateMaybeMessage<::Yarn::Instruction>(Arena*);
template<> YARNSPINNER_API ::Yarn::Node* Arena::CreateMaybeMessage<::Yarn::Node>(Arena*);
template<> YARNSPINNER_API ::Yarn::Node_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::Yarn::Node_LabelsEntry_DoNotUse>(Arena*);
template<> YARNSPINNER_API ::Yarn::Operand* Arena::CreateMaybeMessage<::Yarn::Operand>(Arena*);
template<> YARNSPINNER_API ::Yarn::Program* Arena::CreateMaybeMessage<::Yarn::Program>(Arena*);
template<> YARNSPINNER_API ::Yarn::Program_InitialValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Yarn::Program_InitialValuesEntry_DoNotUse>(Arena*);
template<> YARNSPINNER_API ::Yarn::Program_NodesEntry_DoNotUse* Arena::CreateMaybeMessage<::Yarn::Program_NodesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Yarn {

enum Instruction_OpCode : int {
  Instruction_OpCode_JUMP_TO = 0,
  Instruction_OpCode_JUMP = 1,
  Instruction_OpCode_RUN_LINE = 2,
  Instruction_OpCode_RUN_COMMAND = 3,
  Instruction_OpCode_ADD_OPTION = 4,
  Instruction_OpCode_SHOW_OPTIONS = 5,
  Instruction_OpCode_PUSH_STRING = 6,
  Instruction_OpCode_PUSH_FLOAT = 7,
  Instruction_OpCode_PUSH_BOOL = 8,
  Instruction_OpCode_PUSH_NULL = 9,
  Instruction_OpCode_JUMP_IF_FALSE = 10,
  Instruction_OpCode_POP = 11,
  Instruction_OpCode_CALL_FUNC = 12,
  Instruction_OpCode_PUSH_VARIABLE = 13,
  Instruction_OpCode_STORE_VARIABLE = 14,
  Instruction_OpCode_STOP = 15,
  Instruction_OpCode_RUN_NODE = 16,
  Instruction_OpCode_Instruction_OpCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Instruction_OpCode_Instruction_OpCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
YARNSPINNER_API bool Instruction_OpCode_IsValid(int value);
constexpr Instruction_OpCode Instruction_OpCode_OpCode_MIN = Instruction_OpCode_JUMP_TO;
constexpr Instruction_OpCode Instruction_OpCode_OpCode_MAX = Instruction_OpCode_RUN_NODE;
constexpr int Instruction_OpCode_OpCode_ARRAYSIZE = Instruction_OpCode_OpCode_MAX + 1;

YARNSPINNER_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Instruction_OpCode_descriptor();
template<typename T>
inline const std::string& Instruction_OpCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Instruction_OpCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Instruction_OpCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Instruction_OpCode_descriptor(), enum_t_value);
}
inline bool Instruction_OpCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Instruction_OpCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Instruction_OpCode>(
    Instruction_OpCode_descriptor(), name, value);
}
// ===================================================================

class Program_NodesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Program_NodesEntry_DoNotUse, 
    std::string, ::Yarn::Node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Program_NodesEntry_DoNotUse, 
    std::string, ::Yarn::Node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Program_NodesEntry_DoNotUse();
  explicit constexpr Program_NodesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Program_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Program_NodesEntry_DoNotUse& other);
  static const Program_NodesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Program_NodesEntry_DoNotUse*>(&_Program_NodesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Yarn.Program.NodesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Program_InitialValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Program_InitialValuesEntry_DoNotUse, 
    std::string, ::Yarn::Operand,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Program_InitialValuesEntry_DoNotUse, 
    std::string, ::Yarn::Operand,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Program_InitialValuesEntry_DoNotUse();
  explicit constexpr Program_InitialValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Program_InitialValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Program_InitialValuesEntry_DoNotUse& other);
  static const Program_InitialValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Program_InitialValuesEntry_DoNotUse*>(&_Program_InitialValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Yarn.Program.InitialValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class YARNSPINNER_API Program final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Program) */ {
 public:
  inline Program() : Program(nullptr) {}
  ~Program() override;
  explicit constexpr Program(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Program& default_instance() {
    return *internal_default_instance();
  }
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Program& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Program& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Program";
  }
  protected:
  explicit Program(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kInitialValuesFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // map<string, .Yarn.Node> nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >&
      _internal_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >*
      _internal_mutable_nodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >&
      nodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >*
      mutable_nodes();

  // map<string, .Yarn.Operand> initial_values = 3;
  int initial_values_size() const;
  private:
  int _internal_initial_values_size() const;
  public:
  void clear_initial_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >&
      _internal_initial_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >*
      _internal_mutable_initial_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >&
      initial_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >*
      mutable_initial_values();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Yarn.Program)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Program_NodesEntry_DoNotUse,
      std::string, ::Yarn::Node,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Program_InitialValuesEntry_DoNotUse,
      std::string, ::Yarn::Operand,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> initial_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_yarn_5fspinner_2eproto;
};
// -------------------------------------------------------------------

class Node_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Node_LabelsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Node_LabelsEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Node_LabelsEntry_DoNotUse();
  explicit constexpr Node_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Node_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Node_LabelsEntry_DoNotUse& other);
  static const Node_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Node_LabelsEntry_DoNotUse*>(&_Node_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Yarn.Node.LabelsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class YARNSPINNER_API Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInstructionsFieldNumber = 2,
    kLabelsFieldNumber = 3,
    kTagsFieldNumber = 4,
    kNameFieldNumber = 1,
    kSourceTextStringIDFieldNumber = 5,
  };
  // repeated .Yarn.Instruction instructions = 2;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::Yarn::Instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Instruction >*
      mutable_instructions();
  private:
  const ::Yarn::Instruction& _internal_instructions(int index) const;
  ::Yarn::Instruction* _internal_add_instructions();
  public:
  const ::Yarn::Instruction& instructions(int index) const;
  ::Yarn::Instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Instruction >&
      instructions() const;

  // map<string, int32> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_labels();

  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sourceTextStringID = 5;
  void clear_sourcetextstringid();
  const std::string& sourcetextstringid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourcetextstringid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourcetextstringid();
  PROTOBUF_NODISCARD std::string* release_sourcetextstringid();
  void set_allocated_sourcetextstringid(std::string* sourcetextstringid);
  private:
  const std::string& _internal_sourcetextstringid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourcetextstringid(const std::string& value);
  std::string* _internal_mutable_sourcetextstringid();
  public:

  // @@protoc_insertion_point(class_scope:Yarn.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Instruction > instructions_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Node_LabelsEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcetextstringid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_yarn_5fspinner_2eproto;
};
// -------------------------------------------------------------------

class YARNSPINNER_API Instruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Instruction) */ {
 public:
  inline Instruction() : Instruction(nullptr) {}
  ~Instruction() override;
  explicit constexpr Instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Instruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Instruction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Instruction";
  }
  protected:
  explicit Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Instruction_OpCode OpCode;
  static constexpr OpCode JUMP_TO =
    Instruction_OpCode_JUMP_TO;
  static constexpr OpCode JUMP =
    Instruction_OpCode_JUMP;
  static constexpr OpCode RUN_LINE =
    Instruction_OpCode_RUN_LINE;
  static constexpr OpCode RUN_COMMAND =
    Instruction_OpCode_RUN_COMMAND;
  static constexpr OpCode ADD_OPTION =
    Instruction_OpCode_ADD_OPTION;
  static constexpr OpCode SHOW_OPTIONS =
    Instruction_OpCode_SHOW_OPTIONS;
  static constexpr OpCode PUSH_STRING =
    Instruction_OpCode_PUSH_STRING;
  static constexpr OpCode PUSH_FLOAT =
    Instruction_OpCode_PUSH_FLOAT;
  static constexpr OpCode PUSH_BOOL =
    Instruction_OpCode_PUSH_BOOL;
  static constexpr OpCode PUSH_NULL =
    Instruction_OpCode_PUSH_NULL;
  static constexpr OpCode JUMP_IF_FALSE =
    Instruction_OpCode_JUMP_IF_FALSE;
  static constexpr OpCode POP =
    Instruction_OpCode_POP;
  static constexpr OpCode CALL_FUNC =
    Instruction_OpCode_CALL_FUNC;
  static constexpr OpCode PUSH_VARIABLE =
    Instruction_OpCode_PUSH_VARIABLE;
  static constexpr OpCode STORE_VARIABLE =
    Instruction_OpCode_STORE_VARIABLE;
  static constexpr OpCode STOP =
    Instruction_OpCode_STOP;
  static constexpr OpCode RUN_NODE =
    Instruction_OpCode_RUN_NODE;
  static inline bool OpCode_IsValid(int value) {
    return Instruction_OpCode_IsValid(value);
  }
  static constexpr OpCode OpCode_MIN =
    Instruction_OpCode_OpCode_MIN;
  static constexpr OpCode OpCode_MAX =
    Instruction_OpCode_OpCode_MAX;
  static constexpr int OpCode_ARRAYSIZE =
    Instruction_OpCode_OpCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OpCode_descriptor() {
    return Instruction_OpCode_descriptor();
  }
  template<typename T>
  static inline const std::string& OpCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OpCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OpCode_Name.");
    return Instruction_OpCode_Name(enum_t_value);
  }
  static inline bool OpCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OpCode* value) {
    return Instruction_OpCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOperandsFieldNumber = 2,
    kOpcodeFieldNumber = 1,
  };
  // repeated .Yarn.Operand operands = 2;
  int operands_size() const;
  private:
  int _internal_operands_size() const;
  public:
  void clear_operands();
  ::Yarn::Operand* mutable_operands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Operand >*
      mutable_operands();
  private:
  const ::Yarn::Operand& _internal_operands(int index) const;
  ::Yarn::Operand* _internal_add_operands();
  public:
  const ::Yarn::Operand& operands(int index) const;
  ::Yarn::Operand* add_operands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Operand >&
      operands() const;

  // .Yarn.Instruction.OpCode opcode = 1;
  void clear_opcode();
  ::Yarn::Instruction_OpCode opcode() const;
  void set_opcode(::Yarn::Instruction_OpCode value);
  private:
  ::Yarn::Instruction_OpCode _internal_opcode() const;
  void _internal_set_opcode(::Yarn::Instruction_OpCode value);
  public:

  // @@protoc_insertion_point(class_scope:Yarn.Instruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Operand > operands_;
  int opcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_yarn_5fspinner_2eproto;
};
// -------------------------------------------------------------------

class YARNSPINNER_API Operand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Operand) */ {
 public:
  inline Operand() : Operand(nullptr) {}
  ~Operand() override;
  explicit constexpr Operand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operand(const Operand& from);
  Operand(Operand&& from) noexcept
    : Operand() {
    *this = ::std::move(from);
  }

  inline Operand& operator=(const Operand& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operand& operator=(Operand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operand& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kBoolValue = 2,
    kFloatValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const Operand* internal_default_instance() {
    return reinterpret_cast<const Operand*>(
               &_Operand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Operand& a, Operand& b) {
    a.Swap(&b);
  }
  inline void Swap(Operand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Operand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Operand";
  }
  protected:
  explicit Operand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 2;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // float float_value = 3;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Yarn.Operand)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_float_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    float float_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_yarn_5fspinner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Program

// string name = 1;
inline void Program::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Program::name() const {
  // @@protoc_insertion_point(field_get:Yarn.Program.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Program::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.Program.name)
}
inline std::string* Program::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Yarn.Program.name)
  return _s;
}
inline const std::string& Program::_internal_name() const {
  return name_.Get();
}
inline void Program::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Program::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Program::release_name() {
  // @@protoc_insertion_point(field_release:Yarn.Program.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Program::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Yarn.Program.name)
}

// map<string, .Yarn.Node> nodes = 2;
inline int Program::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Program::nodes_size() const {
  return _internal_nodes_size();
}
inline void Program::clear_nodes() {
  nodes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >&
Program::_internal_nodes() const {
  return nodes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >&
Program::nodes() const {
  // @@protoc_insertion_point(field_map:Yarn.Program.nodes)
  return _internal_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >*
Program::_internal_mutable_nodes() {
  return nodes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >*
Program::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_map:Yarn.Program.nodes)
  return _internal_mutable_nodes();
}

// map<string, .Yarn.Operand> initial_values = 3;
inline int Program::_internal_initial_values_size() const {
  return initial_values_.size();
}
inline int Program::initial_values_size() const {
  return _internal_initial_values_size();
}
inline void Program::clear_initial_values() {
  initial_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >&
Program::_internal_initial_values() const {
  return initial_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >&
Program::initial_values() const {
  // @@protoc_insertion_point(field_map:Yarn.Program.initial_values)
  return _internal_initial_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >*
Program::_internal_mutable_initial_values() {
  return initial_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >*
Program::mutable_initial_values() {
  // @@protoc_insertion_point(field_mutable_map:Yarn.Program.initial_values)
  return _internal_mutable_initial_values();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Node

// string name = 1;
inline void Node::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:Yarn.Node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.Node.name)
}
inline std::string* Node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Yarn.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  return name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:Yarn.Node.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Yarn.Node.name)
}

// repeated .Yarn.Instruction instructions = 2;
inline int Node::_internal_instructions_size() const {
  return instructions_.size();
}
inline int Node::instructions_size() const {
  return _internal_instructions_size();
}
inline void Node::clear_instructions() {
  instructions_.Clear();
}
inline ::Yarn::Instruction* Node::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:Yarn.Node.instructions)
  return instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Instruction >*
Node::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:Yarn.Node.instructions)
  return &instructions_;
}
inline const ::Yarn::Instruction& Node::_internal_instructions(int index) const {
  return instructions_.Get(index);
}
inline const ::Yarn::Instruction& Node::instructions(int index) const {
  // @@protoc_insertion_point(field_get:Yarn.Node.instructions)
  return _internal_instructions(index);
}
inline ::Yarn::Instruction* Node::_internal_add_instructions() {
  return instructions_.Add();
}
inline ::Yarn::Instruction* Node::add_instructions() {
  ::Yarn::Instruction* _add = _internal_add_instructions();
  // @@protoc_insertion_point(field_add:Yarn.Node.instructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Instruction >&
Node::instructions() const {
  // @@protoc_insertion_point(field_list:Yarn.Node.instructions)
  return instructions_;
}

// map<string, int32> labels = 3;
inline int Node::_internal_labels_size() const {
  return labels_.size();
}
inline int Node::labels_size() const {
  return _internal_labels_size();
}
inline void Node::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Node::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Node::labels() const {
  // @@protoc_insertion_point(field_map:Yarn.Node.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Node::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Node::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:Yarn.Node.labels)
  return _internal_mutable_labels();
}

// repeated string tags = 4;
inline int Node::_internal_tags_size() const {
  return tags_.size();
}
inline int Node::tags_size() const {
  return _internal_tags_size();
}
inline void Node::clear_tags() {
  tags_.Clear();
}
inline std::string* Node::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:Yarn.Node.tags)
  return _s;
}
inline const std::string& Node::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Node::tags(int index) const {
  // @@protoc_insertion_point(field_get:Yarn.Node.tags)
  return _internal_tags(index);
}
inline std::string* Node::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Yarn.Node.tags)
  return tags_.Mutable(index);
}
inline void Node::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Yarn.Node.tags)
}
inline void Node::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Yarn.Node.tags)
}
inline void Node::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Yarn.Node.tags)
}
inline void Node::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Yarn.Node.tags)
}
inline std::string* Node::_internal_add_tags() {
  return tags_.Add();
}
inline void Node::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Yarn.Node.tags)
}
inline void Node::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Yarn.Node.tags)
}
inline void Node::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Yarn.Node.tags)
}
inline void Node::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Yarn.Node.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::tags() const {
  // @@protoc_insertion_point(field_list:Yarn.Node.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Yarn.Node.tags)
  return &tags_;
}

// string sourceTextStringID = 5;
inline void Node::clear_sourcetextstringid() {
  sourcetextstringid_.ClearToEmpty();
}
inline const std::string& Node::sourcetextstringid() const {
  // @@protoc_insertion_point(field_get:Yarn.Node.sourceTextStringID)
  return _internal_sourcetextstringid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_sourcetextstringid(ArgT0&& arg0, ArgT... args) {
 
 sourcetextstringid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.Node.sourceTextStringID)
}
inline std::string* Node::mutable_sourcetextstringid() {
  std::string* _s = _internal_mutable_sourcetextstringid();
  // @@protoc_insertion_point(field_mutable:Yarn.Node.sourceTextStringID)
  return _s;
}
inline const std::string& Node::_internal_sourcetextstringid() const {
  return sourcetextstringid_.Get();
}
inline void Node::_internal_set_sourcetextstringid(const std::string& value) {
  
  sourcetextstringid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_sourcetextstringid() {
  
  return sourcetextstringid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_sourcetextstringid() {
  // @@protoc_insertion_point(field_release:Yarn.Node.sourceTextStringID)
  return sourcetextstringid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Node::set_allocated_sourcetextstringid(std::string* sourcetextstringid) {
  if (sourcetextstringid != nullptr) {
    
  } else {
    
  }
  sourcetextstringid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcetextstringid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sourcetextstringid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sourcetextstringid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Yarn.Node.sourceTextStringID)
}

// -------------------------------------------------------------------

// Instruction

// .Yarn.Instruction.OpCode opcode = 1;
inline void Instruction::clear_opcode() {
  opcode_ = 0;
}
inline ::Yarn::Instruction_OpCode Instruction::_internal_opcode() const {
  return static_cast< ::Yarn::Instruction_OpCode >(opcode_);
}
inline ::Yarn::Instruction_OpCode Instruction::opcode() const {
  // @@protoc_insertion_point(field_get:Yarn.Instruction.opcode)
  return _internal_opcode();
}
inline void Instruction::_internal_set_opcode(::Yarn::Instruction_OpCode value) {
  
  opcode_ = value;
}
inline void Instruction::set_opcode(::Yarn::Instruction_OpCode value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:Yarn.Instruction.opcode)
}

// repeated .Yarn.Operand operands = 2;
inline int Instruction::_internal_operands_size() const {
  return operands_.size();
}
inline int Instruction::operands_size() const {
  return _internal_operands_size();
}
inline void Instruction::clear_operands() {
  operands_.Clear();
}
inline ::Yarn::Operand* Instruction::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:Yarn.Instruction.operands)
  return operands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Operand >*
Instruction::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:Yarn.Instruction.operands)
  return &operands_;
}
inline const ::Yarn::Operand& Instruction::_internal_operands(int index) const {
  return operands_.Get(index);
}
inline const ::Yarn::Operand& Instruction::operands(int index) const {
  // @@protoc_insertion_point(field_get:Yarn.Instruction.operands)
  return _internal_operands(index);
}
inline ::Yarn::Operand* Instruction::_internal_add_operands() {
  return operands_.Add();
}
inline ::Yarn::Operand* Instruction::add_operands() {
  ::Yarn::Operand* _add = _internal_add_operands();
  // @@protoc_insertion_point(field_add:Yarn.Instruction.operands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Operand >&
Instruction::operands() const {
  // @@protoc_insertion_point(field_list:Yarn.Instruction.operands)
  return operands_;
}

// -------------------------------------------------------------------

// Operand

// string string_value = 1;
inline bool Operand::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Operand::has_string_value() const {
  return _internal_has_string_value();
}
inline void Operand::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Operand::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Operand::string_value() const {
  // @@protoc_insertion_point(field_get:Yarn.Operand.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Operand::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.Operand.string_value)
}
inline std::string* Operand::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:Yarn.Operand.string_value)
  return _s;
}
inline const std::string& Operand::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Operand::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operand::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operand::release_string_value() {
  // @@protoc_insertion_point(field_release:Yarn.Operand.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Operand::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Yarn.Operand.string_value)
}

// bool bool_value = 2;
inline bool Operand::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool Operand::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Operand::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Operand::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Operand::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void Operand::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool Operand::bool_value() const {
  // @@protoc_insertion_point(field_get:Yarn.Operand.bool_value)
  return _internal_bool_value();
}
inline void Operand::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:Yarn.Operand.bool_value)
}

// float float_value = 3;
inline bool Operand::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool Operand::has_float_value() const {
  return _internal_has_float_value();
}
inline void Operand::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Operand::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float Operand::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void Operand::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float Operand::float_value() const {
  // @@protoc_insertion_point(field_get:Yarn.Operand.float_value)
  return _internal_float_value();
}
inline void Operand::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:Yarn.Operand.float_value)
}

inline bool Operand::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Operand::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Operand::ValueCase Operand::value_case() const {
  return Operand::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Yarn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Yarn::Instruction_OpCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Yarn::Instruction_OpCode>() {
  return ::Yarn::Instruction_OpCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_yarn_5fspinner_2eproto
