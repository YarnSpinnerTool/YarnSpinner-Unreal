// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler_output.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_compiler_5foutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_compiler_5foutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "yarn_spinner.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_compiler_5foutput_2eproto YARNSPINNEREDITOR_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct YARNSPINNEREDITOR_API TableStruct_compiler_5foutput_2eproto {
  static const uint32_t offsets[];
};
YARNSPINNEREDITOR_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_compiler_5foutput_2eproto;
namespace Yarn {
class CompilerOutput;
struct CompilerOutputDefaultTypeInternal;
YARNSPINNEREDITOR_API extern CompilerOutputDefaultTypeInternal _CompilerOutput_default_instance_;
class CompilerOutput_StringsEntry_DoNotUse;
struct CompilerOutput_StringsEntry_DoNotUseDefaultTypeInternal;
YARNSPINNEREDITOR_API extern CompilerOutput_StringsEntry_DoNotUseDefaultTypeInternal _CompilerOutput_StringsEntry_DoNotUse_default_instance_;
class Diagnostic;
struct DiagnosticDefaultTypeInternal;
YARNSPINNEREDITOR_API extern DiagnosticDefaultTypeInternal _Diagnostic_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
YARNSPINNEREDITOR_API extern PositionDefaultTypeInternal _Position_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
YARNSPINNEREDITOR_API extern RangeDefaultTypeInternal _Range_default_instance_;
class StringInfo;
struct StringInfoDefaultTypeInternal;
YARNSPINNEREDITOR_API extern StringInfoDefaultTypeInternal _StringInfo_default_instance_;
}  // namespace Yarn
PROTOBUF_NAMESPACE_OPEN
template<> YARNSPINNEREDITOR_API ::Yarn::CompilerOutput* Arena::CreateMaybeMessage<::Yarn::CompilerOutput>(Arena*);
template<> YARNSPINNEREDITOR_API ::Yarn::CompilerOutput_StringsEntry_DoNotUse* Arena::CreateMaybeMessage<::Yarn::CompilerOutput_StringsEntry_DoNotUse>(Arena*);
template<> YARNSPINNEREDITOR_API ::Yarn::Diagnostic* Arena::CreateMaybeMessage<::Yarn::Diagnostic>(Arena*);
template<> YARNSPINNEREDITOR_API ::Yarn::Position* Arena::CreateMaybeMessage<::Yarn::Position>(Arena*);
template<> YARNSPINNEREDITOR_API ::Yarn::Range* Arena::CreateMaybeMessage<::Yarn::Range>(Arena*);
template<> YARNSPINNEREDITOR_API ::Yarn::StringInfo* Arena::CreateMaybeMessage<::Yarn::StringInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Yarn {

enum Diagnostic_Severity : int {
  Diagnostic_Severity_Error = 0,
  Diagnostic_Severity_Warning = 1,
  Diagnostic_Severity_Info = 2,
  Diagnostic_Severity_Diagnostic_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Diagnostic_Severity_Diagnostic_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
YARNSPINNEREDITOR_API bool Diagnostic_Severity_IsValid(int value);
constexpr Diagnostic_Severity Diagnostic_Severity_Severity_MIN = Diagnostic_Severity_Error;
constexpr Diagnostic_Severity Diagnostic_Severity_Severity_MAX = Diagnostic_Severity_Info;
constexpr int Diagnostic_Severity_Severity_ARRAYSIZE = Diagnostic_Severity_Severity_MAX + 1;

YARNSPINNEREDITOR_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Diagnostic_Severity_descriptor();
template<typename T>
inline const std::string& Diagnostic_Severity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Diagnostic_Severity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Diagnostic_Severity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Diagnostic_Severity_descriptor(), enum_t_value);
}
inline bool Diagnostic_Severity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Diagnostic_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Diagnostic_Severity>(
    Diagnostic_Severity_descriptor(), name, value);
}
// ===================================================================

class CompilerOutput_StringsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CompilerOutput_StringsEntry_DoNotUse, 
    std::string, ::Yarn::StringInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CompilerOutput_StringsEntry_DoNotUse, 
    std::string, ::Yarn::StringInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CompilerOutput_StringsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CompilerOutput_StringsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CompilerOutput_StringsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CompilerOutput_StringsEntry_DoNotUse& other);
  static const CompilerOutput_StringsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CompilerOutput_StringsEntry_DoNotUse*>(&_CompilerOutput_StringsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Yarn.CompilerOutput.StringsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_compiler_5foutput_2eproto;
};

// -------------------------------------------------------------------

class YARNSPINNEREDITOR_API CompilerOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.CompilerOutput) */ {
 public:
  inline CompilerOutput() : CompilerOutput(nullptr) {}
  ~CompilerOutput() override;
  explicit PROTOBUF_CONSTEXPR CompilerOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompilerOutput(const CompilerOutput& from);
  CompilerOutput(CompilerOutput&& from) noexcept
    : CompilerOutput() {
    *this = ::std::move(from);
  }

  inline CompilerOutput& operator=(const CompilerOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompilerOutput& operator=(CompilerOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompilerOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompilerOutput* internal_default_instance() {
    return reinterpret_cast<const CompilerOutput*>(
               &_CompilerOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompilerOutput& a, CompilerOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CompilerOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompilerOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompilerOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompilerOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompilerOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompilerOutput& from) {
    CompilerOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompilerOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.CompilerOutput";
  }
  protected:
  explicit CompilerOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 2,
    kDiagnosticsFieldNumber = 3,
    kProgramFieldNumber = 1,
  };
  // map<string, .Yarn.StringInfo> strings = 2;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >&
      _internal_strings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >*
      _internal_mutable_strings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >&
      strings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >*
      mutable_strings();

  // repeated .Yarn.Diagnostic diagnostics = 3;
  int diagnostics_size() const;
  private:
  int _internal_diagnostics_size() const;
  public:
  void clear_diagnostics();
  ::Yarn::Diagnostic* mutable_diagnostics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Diagnostic >*
      mutable_diagnostics();
  private:
  const ::Yarn::Diagnostic& _internal_diagnostics(int index) const;
  ::Yarn::Diagnostic* _internal_add_diagnostics();
  public:
  const ::Yarn::Diagnostic& diagnostics(int index) const;
  ::Yarn::Diagnostic* add_diagnostics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Diagnostic >&
      diagnostics() const;

  // .Yarn.Program program = 1;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  const ::Yarn::Program& program() const;
  PROTOBUF_NODISCARD ::Yarn::Program* release_program();
  ::Yarn::Program* mutable_program();
  void set_allocated_program(::Yarn::Program* program);
  private:
  const ::Yarn::Program& _internal_program() const;
  ::Yarn::Program* _internal_mutable_program();
  public:
  void unsafe_arena_set_allocated_program(
      ::Yarn::Program* program);
  ::Yarn::Program* unsafe_arena_release_program();

  // @@protoc_insertion_point(class_scope:Yarn.CompilerOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CompilerOutput_StringsEntry_DoNotUse,
        std::string, ::Yarn::StringInfo,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> strings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Diagnostic > diagnostics_;
    ::Yarn::Program* program_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compiler_5foutput_2eproto;
};
// -------------------------------------------------------------------

class YARNSPINNEREDITOR_API Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit PROTOBUF_CONSTEXPR Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Range& from) {
    Range::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .Yarn.Position start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Yarn::Position& start() const;
  PROTOBUF_NODISCARD ::Yarn::Position* release_start();
  ::Yarn::Position* mutable_start();
  void set_allocated_start(::Yarn::Position* start);
  private:
  const ::Yarn::Position& _internal_start() const;
  ::Yarn::Position* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::Yarn::Position* start);
  ::Yarn::Position* unsafe_arena_release_start();

  // .Yarn.Position end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::Yarn::Position& end() const;
  PROTOBUF_NODISCARD ::Yarn::Position* release_end();
  ::Yarn::Position* mutable_end();
  void set_allocated_end(::Yarn::Position* end);
  private:
  const ::Yarn::Position& _internal_end() const;
  ::Yarn::Position* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::Yarn::Position* end);
  ::Yarn::Position* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:Yarn.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Yarn::Position* start_;
    ::Yarn::Position* end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compiler_5foutput_2eproto;
};
// -------------------------------------------------------------------

class YARNSPINNEREDITOR_API Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // int32 line = 1;
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // int32 character = 2;
  void clear_character();
  int32_t character() const;
  void set_character(int32_t value);
  private:
  int32_t _internal_character() const;
  void _internal_set_character(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Yarn.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t line_;
    int32_t character_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compiler_5foutput_2eproto;
};
// -------------------------------------------------------------------

class YARNSPINNEREDITOR_API Diagnostic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.Diagnostic) */ {
 public:
  inline Diagnostic() : Diagnostic(nullptr) {}
  ~Diagnostic() override;
  explicit PROTOBUF_CONSTEXPR Diagnostic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Diagnostic(const Diagnostic& from);
  Diagnostic(Diagnostic&& from) noexcept
    : Diagnostic() {
    *this = ::std::move(from);
  }

  inline Diagnostic& operator=(const Diagnostic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diagnostic& operator=(Diagnostic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Diagnostic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Diagnostic* internal_default_instance() {
    return reinterpret_cast<const Diagnostic*>(
               &_Diagnostic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Diagnostic& a, Diagnostic& b) {
    a.Swap(&b);
  }
  inline void Swap(Diagnostic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Diagnostic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Diagnostic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Diagnostic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Diagnostic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Diagnostic& from) {
    Diagnostic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnostic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.Diagnostic";
  }
  protected:
  explicit Diagnostic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Diagnostic_Severity Severity;
  static constexpr Severity Error =
    Diagnostic_Severity_Error;
  static constexpr Severity Warning =
    Diagnostic_Severity_Warning;
  static constexpr Severity Info =
    Diagnostic_Severity_Info;
  static inline bool Severity_IsValid(int value) {
    return Diagnostic_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN =
    Diagnostic_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX =
    Diagnostic_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE =
    Diagnostic_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Severity_descriptor() {
    return Diagnostic_Severity_descriptor();
  }
  template<typename T>
  static inline const std::string& Severity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Severity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Severity_Name.");
    return Diagnostic_Severity_Name(enum_t_value);
  }
  static inline bool Severity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Severity* value) {
    return Diagnostic_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kFileNameFieldNumber = 4,
    kRangeFieldNumber = 3,
    kSeverityFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string fileName = 4;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .Yarn.Range range = 3;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::Yarn::Range& range() const;
  PROTOBUF_NODISCARD ::Yarn::Range* release_range();
  ::Yarn::Range* mutable_range();
  void set_allocated_range(::Yarn::Range* range);
  private:
  const ::Yarn::Range& _internal_range() const;
  ::Yarn::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::Yarn::Range* range);
  ::Yarn::Range* unsafe_arena_release_range();

  // .Yarn.Diagnostic.Severity severity = 2;
  void clear_severity();
  ::Yarn::Diagnostic_Severity severity() const;
  void set_severity(::Yarn::Diagnostic_Severity value);
  private:
  ::Yarn::Diagnostic_Severity _internal_severity() const;
  void _internal_set_severity(::Yarn::Diagnostic_Severity value);
  public:

  // @@protoc_insertion_point(class_scope:Yarn.Diagnostic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::Yarn::Range* range_;
    int severity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compiler_5foutput_2eproto;
};
// -------------------------------------------------------------------

class YARNSPINNEREDITOR_API StringInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Yarn.StringInfo) */ {
 public:
  inline StringInfo() : StringInfo(nullptr) {}
  ~StringInfo() override;
  explicit PROTOBUF_CONSTEXPR StringInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringInfo(const StringInfo& from);
  StringInfo(StringInfo&& from) noexcept
    : StringInfo() {
    *this = ::std::move(from);
  }

  inline StringInfo& operator=(const StringInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringInfo& operator=(StringInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringInfo* internal_default_instance() {
    return reinterpret_cast<const StringInfo*>(
               &_StringInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringInfo& a, StringInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StringInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringInfo& from) {
    StringInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Yarn.StringInfo";
  }
  protected:
  explicit StringInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:Yarn.StringInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compiler_5foutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CompilerOutput

// .Yarn.Program program = 1;
inline bool CompilerOutput::_internal_has_program() const {
  return this != internal_default_instance() && _impl_.program_ != nullptr;
}
inline bool CompilerOutput::has_program() const {
  return _internal_has_program();
}
inline const ::Yarn::Program& CompilerOutput::_internal_program() const {
  const ::Yarn::Program* p = _impl_.program_;
  return p != nullptr ? *p : reinterpret_cast<const ::Yarn::Program&>(
      ::Yarn::_Program_default_instance_);
}
inline const ::Yarn::Program& CompilerOutput::program() const {
  // @@protoc_insertion_point(field_get:Yarn.CompilerOutput.program)
  return _internal_program();
}
inline void CompilerOutput::unsafe_arena_set_allocated_program(
    ::Yarn::Program* program) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.program_);
  }
  _impl_.program_ = program;
  if (program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Yarn.CompilerOutput.program)
}
inline ::Yarn::Program* CompilerOutput::release_program() {
  
  ::Yarn::Program* temp = _impl_.program_;
  _impl_.program_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Yarn::Program* CompilerOutput::unsafe_arena_release_program() {
  // @@protoc_insertion_point(field_release:Yarn.CompilerOutput.program)
  
  ::Yarn::Program* temp = _impl_.program_;
  _impl_.program_ = nullptr;
  return temp;
}
inline ::Yarn::Program* CompilerOutput::_internal_mutable_program() {
  
  if (_impl_.program_ == nullptr) {
    auto* p = CreateMaybeMessage<::Yarn::Program>(GetArenaForAllocation());
    _impl_.program_ = p;
  }
  return _impl_.program_;
}
inline ::Yarn::Program* CompilerOutput::mutable_program() {
  ::Yarn::Program* _msg = _internal_mutable_program();
  // @@protoc_insertion_point(field_mutable:Yarn.CompilerOutput.program)
  return _msg;
}
inline void CompilerOutput::set_allocated_program(::Yarn::Program* program) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.program_);
  }
  if (program) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(program));
    if (message_arena != submessage_arena) {
      program = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, program, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.program_ = program;
  // @@protoc_insertion_point(field_set_allocated:Yarn.CompilerOutput.program)
}

// map<string, .Yarn.StringInfo> strings = 2;
inline int CompilerOutput::_internal_strings_size() const {
  return _impl_.strings_.size();
}
inline int CompilerOutput::strings_size() const {
  return _internal_strings_size();
}
inline void CompilerOutput::clear_strings() {
  _impl_.strings_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >&
CompilerOutput::_internal_strings() const {
  return _impl_.strings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >&
CompilerOutput::strings() const {
  // @@protoc_insertion_point(field_map:Yarn.CompilerOutput.strings)
  return _internal_strings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >*
CompilerOutput::_internal_mutable_strings() {
  return _impl_.strings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::StringInfo >*
CompilerOutput::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_map:Yarn.CompilerOutput.strings)
  return _internal_mutable_strings();
}

// repeated .Yarn.Diagnostic diagnostics = 3;
inline int CompilerOutput::_internal_diagnostics_size() const {
  return _impl_.diagnostics_.size();
}
inline int CompilerOutput::diagnostics_size() const {
  return _internal_diagnostics_size();
}
inline void CompilerOutput::clear_diagnostics() {
  _impl_.diagnostics_.Clear();
}
inline ::Yarn::Diagnostic* CompilerOutput::mutable_diagnostics(int index) {
  // @@protoc_insertion_point(field_mutable:Yarn.CompilerOutput.diagnostics)
  return _impl_.diagnostics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Diagnostic >*
CompilerOutput::mutable_diagnostics() {
  // @@protoc_insertion_point(field_mutable_list:Yarn.CompilerOutput.diagnostics)
  return &_impl_.diagnostics_;
}
inline const ::Yarn::Diagnostic& CompilerOutput::_internal_diagnostics(int index) const {
  return _impl_.diagnostics_.Get(index);
}
inline const ::Yarn::Diagnostic& CompilerOutput::diagnostics(int index) const {
  // @@protoc_insertion_point(field_get:Yarn.CompilerOutput.diagnostics)
  return _internal_diagnostics(index);
}
inline ::Yarn::Diagnostic* CompilerOutput::_internal_add_diagnostics() {
  return _impl_.diagnostics_.Add();
}
inline ::Yarn::Diagnostic* CompilerOutput::add_diagnostics() {
  ::Yarn::Diagnostic* _add = _internal_add_diagnostics();
  // @@protoc_insertion_point(field_add:Yarn.CompilerOutput.diagnostics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Yarn::Diagnostic >&
CompilerOutput::diagnostics() const {
  // @@protoc_insertion_point(field_list:Yarn.CompilerOutput.diagnostics)
  return _impl_.diagnostics_;
}

// -------------------------------------------------------------------

// Range

// .Yarn.Position start = 1;
inline bool Range::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool Range::has_start() const {
  return _internal_has_start();
}
inline void Range::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
inline const ::Yarn::Position& Range::_internal_start() const {
  const ::Yarn::Position* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::Yarn::Position&>(
      ::Yarn::_Position_default_instance_);
}
inline const ::Yarn::Position& Range::start() const {
  // @@protoc_insertion_point(field_get:Yarn.Range.start)
  return _internal_start();
}
inline void Range::unsafe_arena_set_allocated_start(
    ::Yarn::Position* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Yarn.Range.start)
}
inline ::Yarn::Position* Range::release_start() {
  
  ::Yarn::Position* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Yarn::Position* Range::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:Yarn.Range.start)
  
  ::Yarn::Position* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::Yarn::Position* Range::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Yarn::Position>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::Yarn::Position* Range::mutable_start() {
  ::Yarn::Position* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:Yarn.Range.start)
  return _msg;
}
inline void Range::set_allocated_start(::Yarn::Position* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Yarn.Range.start)
}

// .Yarn.Position end = 2;
inline bool Range::_internal_has_end() const {
  return this != internal_default_instance() && _impl_.end_ != nullptr;
}
inline bool Range::has_end() const {
  return _internal_has_end();
}
inline void Range::clear_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
}
inline const ::Yarn::Position& Range::_internal_end() const {
  const ::Yarn::Position* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::Yarn::Position&>(
      ::Yarn::_Position_default_instance_);
}
inline const ::Yarn::Position& Range::end() const {
  // @@protoc_insertion_point(field_get:Yarn.Range.end)
  return _internal_end();
}
inline void Range::unsafe_arena_set_allocated_end(
    ::Yarn::Position* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Yarn.Range.end)
}
inline ::Yarn::Position* Range::release_end() {
  
  ::Yarn::Position* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Yarn::Position* Range::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:Yarn.Range.end)
  
  ::Yarn::Position* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::Yarn::Position* Range::_internal_mutable_end() {
  
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::Yarn::Position>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::Yarn::Position* Range::mutable_end() {
  ::Yarn::Position* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:Yarn.Range.end)
  return _msg;
}
inline void Range::set_allocated_end(::Yarn::Position* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:Yarn.Range.end)
}

// -------------------------------------------------------------------

// Position

// int32 line = 1;
inline void Position::clear_line() {
  _impl_.line_ = 0;
}
inline int32_t Position::_internal_line() const {
  return _impl_.line_;
}
inline int32_t Position::line() const {
  // @@protoc_insertion_point(field_get:Yarn.Position.line)
  return _internal_line();
}
inline void Position::_internal_set_line(int32_t value) {
  
  _impl_.line_ = value;
}
inline void Position::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:Yarn.Position.line)
}

// int32 character = 2;
inline void Position::clear_character() {
  _impl_.character_ = 0;
}
inline int32_t Position::_internal_character() const {
  return _impl_.character_;
}
inline int32_t Position::character() const {
  // @@protoc_insertion_point(field_get:Yarn.Position.character)
  return _internal_character();
}
inline void Position::_internal_set_character(int32_t value) {
  
  _impl_.character_ = value;
}
inline void Position::set_character(int32_t value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:Yarn.Position.character)
}

// -------------------------------------------------------------------

// Diagnostic

// string message = 1;
inline void Diagnostic::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Diagnostic::message() const {
  // @@protoc_insertion_point(field_get:Yarn.Diagnostic.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Diagnostic::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.Diagnostic.message)
}
inline std::string* Diagnostic::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Yarn.Diagnostic.message)
  return _s;
}
inline const std::string& Diagnostic::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Diagnostic::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Diagnostic::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Diagnostic::release_message() {
  // @@protoc_insertion_point(field_release:Yarn.Diagnostic.message)
  return _impl_.message_.Release();
}
inline void Diagnostic::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Yarn.Diagnostic.message)
}

// .Yarn.Diagnostic.Severity severity = 2;
inline void Diagnostic::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::Yarn::Diagnostic_Severity Diagnostic::_internal_severity() const {
  return static_cast< ::Yarn::Diagnostic_Severity >(_impl_.severity_);
}
inline ::Yarn::Diagnostic_Severity Diagnostic::severity() const {
  // @@protoc_insertion_point(field_get:Yarn.Diagnostic.severity)
  return _internal_severity();
}
inline void Diagnostic::_internal_set_severity(::Yarn::Diagnostic_Severity value) {
  
  _impl_.severity_ = value;
}
inline void Diagnostic::set_severity(::Yarn::Diagnostic_Severity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:Yarn.Diagnostic.severity)
}

// .Yarn.Range range = 3;
inline bool Diagnostic::_internal_has_range() const {
  return this != internal_default_instance() && _impl_.range_ != nullptr;
}
inline bool Diagnostic::has_range() const {
  return _internal_has_range();
}
inline void Diagnostic::clear_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
}
inline const ::Yarn::Range& Diagnostic::_internal_range() const {
  const ::Yarn::Range* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::Yarn::Range&>(
      ::Yarn::_Range_default_instance_);
}
inline const ::Yarn::Range& Diagnostic::range() const {
  // @@protoc_insertion_point(field_get:Yarn.Diagnostic.range)
  return _internal_range();
}
inline void Diagnostic::unsafe_arena_set_allocated_range(
    ::Yarn::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Yarn.Diagnostic.range)
}
inline ::Yarn::Range* Diagnostic::release_range() {
  
  ::Yarn::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Yarn::Range* Diagnostic::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:Yarn.Diagnostic.range)
  
  ::Yarn::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::Yarn::Range* Diagnostic::_internal_mutable_range() {
  
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::Yarn::Range>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::Yarn::Range* Diagnostic::mutable_range() {
  ::Yarn::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:Yarn.Diagnostic.range)
  return _msg;
}
inline void Diagnostic::set_allocated_range(::Yarn::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:Yarn.Diagnostic.range)
}

// string fileName = 4;
inline void Diagnostic::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& Diagnostic::filename() const {
  // @@protoc_insertion_point(field_get:Yarn.Diagnostic.fileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Diagnostic::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.Diagnostic.fileName)
}
inline std::string* Diagnostic::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:Yarn.Diagnostic.fileName)
  return _s;
}
inline const std::string& Diagnostic::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void Diagnostic::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Diagnostic::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Diagnostic::release_filename() {
  // @@protoc_insertion_point(field_release:Yarn.Diagnostic.fileName)
  return _impl_.filename_.Release();
}
inline void Diagnostic::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Yarn.Diagnostic.fileName)
}

// -------------------------------------------------------------------

// StringInfo

// string text = 1;
inline void StringInfo::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& StringInfo::text() const {
  // @@protoc_insertion_point(field_get:Yarn.StringInfo.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringInfo::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Yarn.StringInfo.text)
}
inline std::string* StringInfo::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Yarn.StringInfo.text)
  return _s;
}
inline const std::string& StringInfo::_internal_text() const {
  return _impl_.text_.Get();
}
inline void StringInfo::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* StringInfo::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* StringInfo::release_text() {
  // @@protoc_insertion_point(field_release:Yarn.StringInfo.text)
  return _impl_.text_.Release();
}
inline void StringInfo::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Yarn.StringInfo.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Yarn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Yarn::Diagnostic_Severity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Yarn::Diagnostic_Severity>() {
  return ::Yarn::Diagnostic_Severity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_compiler_5foutput_2eproto
