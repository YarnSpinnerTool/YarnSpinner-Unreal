// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yarn_spinner.proto

#include "yarn_spinner.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Yarn {
PROTOBUF_CONSTEXPR Program_NodesEntry_DoNotUse::Program_NodesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Program_NodesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Program_NodesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Program_NodesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Program_NodesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Program_NodesEntry_DoNotUseDefaultTypeInternal _Program_NodesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Program_InitialValuesEntry_DoNotUse::Program_InitialValuesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Program_InitialValuesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Program_InitialValuesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Program_InitialValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Program_InitialValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Program_InitialValuesEntry_DoNotUseDefaultTypeInternal _Program_InitialValuesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Program::Program(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.initial_values_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramDefaultTypeInternal() {}
  union {
    Program _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramDefaultTypeInternal _Program_default_instance_;
PROTOBUF_CONSTEXPR Node_LabelsEntry_DoNotUse::Node_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Node_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Node_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Node_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Node_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Node_LabelsEntry_DoNotUseDefaultTypeInternal _Node_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instructions_)*/{}
  , /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourcetextstringid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR Instruction::Instruction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operands_)*/{}
  , /*decltype(_impl_.opcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstructionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstructionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstructionDefaultTypeInternal() {}
  union {
    Instruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstructionDefaultTypeInternal _Instruction_default_instance_;
PROTOBUF_CONSTEXPR Operand::Operand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OperandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperandDefaultTypeInternal() {}
  union {
    Operand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperandDefaultTypeInternal _Operand_default_instance_;
}  // namespace Yarn
static ::_pb::Metadata file_level_metadata_yarn_5fspinner_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_yarn_5fspinner_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_yarn_5fspinner_2eproto = nullptr;

const uint32_t TableStruct_yarn_5fspinner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_NodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_NodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_NodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_NodesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_InitialValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_InitialValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_InitialValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Program_InitialValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Yarn::Program, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Yarn::Program, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Program, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Program, _impl_.initial_values_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Yarn::Node_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Yarn::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Yarn::Node, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node, _impl_.instructions_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Node, _impl_.sourcetextstringid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Yarn::Instruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Yarn::Instruction, _impl_.opcode_),
  PROTOBUF_FIELD_OFFSET(::Yarn::Instruction, _impl_.operands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Yarn::Operand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Yarn::Operand, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Yarn::Operand, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Yarn::Program_NodesEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::Yarn::Program_InitialValuesEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::Yarn::Program)},
  { 29, 37, -1, sizeof(::Yarn::Node_LabelsEntry_DoNotUse)},
  { 39, -1, -1, sizeof(::Yarn::Node)},
  { 50, -1, -1, sizeof(::Yarn::Instruction)},
  { 58, -1, -1, sizeof(::Yarn::Operand)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Yarn::_Program_NodesEntry_DoNotUse_default_instance_._instance,
  &::Yarn::_Program_InitialValuesEntry_DoNotUse_default_instance_._instance,
  &::Yarn::_Program_default_instance_._instance,
  &::Yarn::_Node_LabelsEntry_DoNotUse_default_instance_._instance,
  &::Yarn::_Node_default_instance_._instance,
  &::Yarn::_Instruction_default_instance_._instance,
  &::Yarn::_Operand_default_instance_._instance,
};

const char descriptor_table_protodef_yarn_5fspinner_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022yarn_spinner.proto\022\004Yarn\"\371\001\n\007Program\022\014"
  "\n\004name\030\001 \001(\t\022\'\n\005nodes\030\002 \003(\0132\030.Yarn.Progr"
  "am.NodesEntry\0228\n\016initial_values\030\003 \003(\0132 ."
  "Yarn.Program.InitialValuesEntry\0328\n\nNodes"
  "Entry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.Yarn"
  ".Node:\0028\001\032C\n\022InitialValuesEntry\022\013\n\003key\030\001"
  " \001(\t\022\034\n\005value\030\002 \001(\0132\r.Yarn.Operand:\0028\001\"\276"
  "\001\n\004Node\022\014\n\004name\030\001 \001(\t\022\'\n\014instructions\030\002 "
  "\003(\0132\021.Yarn.Instruction\022&\n\006labels\030\003 \003(\0132\026"
  ".Yarn.Node.LabelsEntry\022\014\n\004tags\030\004 \003(\t\022\032\n\022"
  "sourceTextStringID\030\005 \001(\t\032-\n\013LabelsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\344\002\n\013Inst"
  "ruction\022(\n\006opcode\030\001 \001(\0162\030.Yarn.Instructi"
  "on.OpCode\022\037\n\010operands\030\002 \003(\0132\r.Yarn.Opera"
  "nd\"\211\002\n\006OpCode\022\013\n\007JUMP_TO\020\000\022\010\n\004JUMP\020\001\022\014\n\010"
  "RUN_LINE\020\002\022\017\n\013RUN_COMMAND\020\003\022\016\n\nADD_OPTIO"
  "N\020\004\022\020\n\014SHOW_OPTIONS\020\005\022\017\n\013PUSH_STRING\020\006\022\016"
  "\n\nPUSH_FLOAT\020\007\022\r\n\tPUSH_BOOL\020\010\022\r\n\tPUSH_NU"
  "LL\020\t\022\021\n\rJUMP_IF_FALSE\020\n\022\007\n\003POP\020\013\022\r\n\tCALL"
  "_FUNC\020\014\022\021\n\rPUSH_VARIABLE\020\r\022\022\n\016STORE_VARI"
  "ABLE\020\016\022\010\n\004STOP\020\017\022\014\n\010RUN_NODE\020\020\"W\n\007Operan"
  "d\022\026\n\014string_value\030\001 \001(\tH\000\022\024\n\nbool_value\030"
  "\002 \001(\010H\000\022\025\n\013float_value\030\003 \001(\002H\000B\007\n\005valueb"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_yarn_5fspinner_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_yarn_5fspinner_2eproto = {
    false, false, 927, descriptor_table_protodef_yarn_5fspinner_2eproto,
    "yarn_spinner.proto",
    &descriptor_table_yarn_5fspinner_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_yarn_5fspinner_2eproto::offsets,
    file_level_metadata_yarn_5fspinner_2eproto, file_level_enum_descriptors_yarn_5fspinner_2eproto,
    file_level_service_descriptors_yarn_5fspinner_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_yarn_5fspinner_2eproto_getter() {
  return &descriptor_table_yarn_5fspinner_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_yarn_5fspinner_2eproto(&descriptor_table_yarn_5fspinner_2eproto);
namespace Yarn {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Instruction_OpCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_yarn_5fspinner_2eproto);
  return file_level_enum_descriptors_yarn_5fspinner_2eproto[0];
}
bool Instruction_OpCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Instruction_OpCode Instruction::JUMP_TO;
constexpr Instruction_OpCode Instruction::JUMP;
constexpr Instruction_OpCode Instruction::RUN_LINE;
constexpr Instruction_OpCode Instruction::RUN_COMMAND;
constexpr Instruction_OpCode Instruction::ADD_OPTION;
constexpr Instruction_OpCode Instruction::SHOW_OPTIONS;
constexpr Instruction_OpCode Instruction::PUSH_STRING;
constexpr Instruction_OpCode Instruction::PUSH_FLOAT;
constexpr Instruction_OpCode Instruction::PUSH_BOOL;
constexpr Instruction_OpCode Instruction::PUSH_NULL;
constexpr Instruction_OpCode Instruction::JUMP_IF_FALSE;
constexpr Instruction_OpCode Instruction::POP;
constexpr Instruction_OpCode Instruction::CALL_FUNC;
constexpr Instruction_OpCode Instruction::PUSH_VARIABLE;
constexpr Instruction_OpCode Instruction::STORE_VARIABLE;
constexpr Instruction_OpCode Instruction::STOP;
constexpr Instruction_OpCode Instruction::RUN_NODE;
constexpr Instruction_OpCode Instruction::OpCode_MIN;
constexpr Instruction_OpCode Instruction::OpCode_MAX;
constexpr int Instruction::OpCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

Program_NodesEntry_DoNotUse::Program_NodesEntry_DoNotUse() {}
Program_NodesEntry_DoNotUse::Program_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Program_NodesEntry_DoNotUse::MergeFrom(const Program_NodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Program_NodesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[0]);
}

// ===================================================================

Program_InitialValuesEntry_DoNotUse::Program_InitialValuesEntry_DoNotUse() {}
Program_InitialValuesEntry_DoNotUse::Program_InitialValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Program_InitialValuesEntry_DoNotUse::MergeFrom(const Program_InitialValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Program_InitialValuesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[1]);
}

// ===================================================================

class Program::_Internal {
 public:
};

Program::Program(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Program::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Yarn.Program)
}
Program::Program(const Program& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Program* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.nodes_)*/{}
    , /*decltype(_impl_.initial_values_)*/{}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.initial_values_.MergeFrom(from._impl_.initial_values_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Yarn.Program)
}

inline void Program::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.nodes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.initial_values_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:Yarn.Program)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Program::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.Destruct();
  _impl_.nodes_.~MapField();
  _impl_.initial_values_.Destruct();
  _impl_.initial_values_.~MapField();
  _impl_.name_.Destroy();
}

void Program::ArenaDtor(void* object) {
  Program* _this = reinterpret_cast< Program* >(object);
  _this->_impl_.nodes_.Destruct();
  _this->_impl_.initial_values_.Destruct();
}
void Program::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:Yarn.Program)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.initial_values_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Program::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Yarn.Program.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Yarn.Node> nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.nodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Yarn.Operand> initial_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.initial_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Program::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Yarn.Program)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Yarn.Program.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .Yarn.Node> nodes = 2;
  if (!this->_internal_nodes().empty()) {
    using MapType = ::_pb::Map<std::string, ::Yarn::Node>;
    using WireHelper = Program_NodesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_nodes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Yarn.Program.NodesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .Yarn.Operand> initial_values = 3;
  if (!this->_internal_initial_values().empty()) {
    using MapType = ::_pb::Map<std::string, ::Yarn::Operand>;
    using WireHelper = Program_InitialValuesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_initial_values();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Yarn.Program.InitialValuesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Yarn.Program)
  return target;
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Yarn.Program)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Yarn.Node> nodes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Node >::const_iterator
      it = this->_internal_nodes().begin();
      it != this->_internal_nodes().end(); ++it) {
    total_size += Program_NodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Yarn.Operand> initial_values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_initial_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Yarn::Operand >::const_iterator
      it = this->_internal_initial_values().begin();
      it != this->_internal_initial_values().end(); ++it) {
    total_size += Program_InitialValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Program::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Program::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Program::GetClassData() const { return &_class_data_; }


void Program::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Program*>(&to_msg);
  auto& from = static_cast<const Program&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Yarn.Program)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.initial_values_.MergeFrom(from._impl_.initial_values_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Yarn.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::InternalSwap(Program* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.initial_values_.InternalSwap(&other->_impl_.initial_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Program::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[2]);
}

// ===================================================================

Node_LabelsEntry_DoNotUse::Node_LabelsEntry_DoNotUse() {}
Node_LabelsEntry_DoNotUse::Node_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Node_LabelsEntry_DoNotUse::MergeFrom(const Node_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Node_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[3]);
}

// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Node::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Yarn.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){from._impl_.instructions_}
    , /*decltype(_impl_.labels_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sourcetextstringid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourcetextstringid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetextstringid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcetextstringid().empty()) {
    _this->_impl_.sourcetextstringid_.Set(from._internal_sourcetextstringid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Yarn.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){arena}
    , /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sourcetextstringid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourcetextstringid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetextstringid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:Yarn.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instructions_.~RepeatedPtrField();
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.sourcetextstringid_.Destroy();
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  _this->_impl_.labels_.Destruct();
}
void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:Yarn.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instructions_.Clear();
  _impl_.labels_.Clear();
  _impl_.tags_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.sourcetextstringid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Yarn.Node.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Yarn.Instruction instructions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Yarn.Node.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sourceTextStringID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sourcetextstringid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Yarn.Node.sourceTextStringID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Yarn.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Yarn.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .Yarn.Instruction instructions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instructions_size()); i < n; i++) {
    const auto& repfield = this->_internal_instructions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, int32> labels = 3;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = Node_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Yarn.Node.LabelsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Yarn.Node.tags");
    target = stream->WriteString(4, s, target);
  }

  // string sourceTextStringID = 5;
  if (!this->_internal_sourcetextstringid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcetextstringid().data(), static_cast<int>(this->_internal_sourcetextstringid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Yarn.Node.sourceTextStringID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sourcetextstringid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Yarn.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Yarn.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Yarn.Instruction instructions = 2;
  total_size += 1UL * this->_internal_instructions_size();
  for (const auto& msg : this->_impl_.instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, int32> labels = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Node_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sourceTextStringID = 5;
  if (!this->_internal_sourcetextstringid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcetextstringid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Yarn.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instructions_.MergeFrom(from._impl_.instructions_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_sourcetextstringid().empty()) {
    _this->_internal_set_sourcetextstringid(from._internal_sourcetextstringid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Yarn.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instructions_.InternalSwap(&other->_impl_.instructions_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcetextstringid_, lhs_arena,
      &other->_impl_.sourcetextstringid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[4]);
}

// ===================================================================

class Instruction::_Internal {
 public:
};

Instruction::Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Yarn.Instruction)
}
Instruction::Instruction(const Instruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Instruction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operands_){from._impl_.operands_}
    , decltype(_impl_.opcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.opcode_ = from._impl_.opcode_;
  // @@protoc_insertion_point(copy_constructor:Yarn.Instruction)
}

inline void Instruction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operands_){arena}
    , decltype(_impl_.opcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:Yarn.Instruction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Instruction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operands_.~RepeatedPtrField();
}

void Instruction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:Yarn.Instruction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operands_.Clear();
  _impl_.opcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instruction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Yarn.Instruction.OpCode opcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opcode(static_cast<::Yarn::Instruction_OpCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .Yarn.Operand operands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instruction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Yarn.Instruction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Yarn.Instruction.OpCode opcode = 1;
  if (this->_internal_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_opcode(), target);
  }

  // repeated .Yarn.Operand operands = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operands_size()); i < n; i++) {
    const auto& repfield = this->_internal_operands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Yarn.Instruction)
  return target;
}

size_t Instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Yarn.Instruction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Yarn.Operand operands = 2;
  total_size += 1UL * this->_internal_operands_size();
  for (const auto& msg : this->_impl_.operands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Yarn.Instruction.OpCode opcode = 1;
  if (this->_internal_opcode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_opcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instruction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Instruction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instruction::GetClassData() const { return &_class_data_; }


void Instruction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Instruction*>(&to_msg);
  auto& from = static_cast<const Instruction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Yarn.Instruction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operands_.MergeFrom(from._impl_.operands_);
  if (from._internal_opcode() != 0) {
    _this->_internal_set_opcode(from._internal_opcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instruction::CopyFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Yarn.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {
  return true;
}

void Instruction::InternalSwap(Instruction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operands_.InternalSwap(&other->_impl_.operands_);
  swap(_impl_.opcode_, other->_impl_.opcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instruction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[5]);
}

// ===================================================================

class Operand::_Internal {
 public:
};

Operand::Operand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Yarn.Operand)
}
Operand::Operand(const Operand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Yarn.Operand)
}

inline void Operand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Operand::~Operand() {
  // @@protoc_insertion_point(destructor:Yarn.Operand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Operand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operand::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:Yarn.Operand)
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Operand::Clear() {
// @@protoc_insertion_point(message_clear_start:Yarn.Operand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Yarn.Operand.string_value"));
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Yarn.Operand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Yarn.Operand.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // bool bool_value = 2;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_value(), target);
  }

  // float float_value = 3;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Yarn.Operand)
  return target;
}

size_t Operand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Yarn.Operand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operand::GetClassData() const { return &_class_data_; }


void Operand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operand*>(&to_msg);
  auto& from = static_cast<const Operand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Yarn.Operand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operand::CopyFrom(const Operand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Yarn.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operand::IsInitialized() const {
  return true;
}

void Operand::InternalSwap(Operand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yarn_5fspinner_2eproto_getter, &descriptor_table_yarn_5fspinner_2eproto_once,
      file_level_metadata_yarn_5fspinner_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Yarn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Yarn::Program_NodesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Yarn::Program_NodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Program_NodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Yarn::Program_InitialValuesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Yarn::Program_InitialValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Program_InitialValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Yarn::Program*
Arena::CreateMaybeMessage< ::Yarn::Program >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Program >(arena);
}
template<> PROTOBUF_NOINLINE ::Yarn::Node_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Yarn::Node_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Node_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Yarn::Node*
Arena::CreateMaybeMessage< ::Yarn::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::Yarn::Instruction*
Arena::CreateMaybeMessage< ::Yarn::Instruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Instruction >(arena);
}
template<> PROTOBUF_NOINLINE ::Yarn::Operand*
Arena::CreateMaybeMessage< ::Yarn::Operand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yarn::Operand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
